"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import {
    Trophy,
    Target,
    Clock,
    TrendingUp,
    BookOpen,
    Play,
    BarChart3,
    Calendar,
    Award,
    Zap,
    User,
    Settings
} from "lucide-react"
import {
    AreaChart,
    Area,
    XAxis,
    YAxis,
    CartesianGrid,
    Tooltip,
    ResponsiveContainer,
    BarChart,
    Bar,
    PieChart,
    Pie,
    Cell,
    RadarChart,
    PolarGrid,
    PolarAngleAxis,
    PolarRadiusAxis,
    Radar
} from "recharts"

interface StudentData {
    id: string
    email: string
    firstName: string
    lastName: string
    university?: string
    major?: string
    targetRole?: string
    subscriptionTier: string
    practiceQuota: number
    practiceUsed: number
    quotaResetDate: string
    analytics?: {
        totalSessions: number
        completedSessions: number
        averageScore: number
        streakDays: number
    }
}

interface PracticeSession {
    id: string
    title: string
    type: string
    difficulty: string
    duration: number
    score?: number
    completedAt?: string
    createdAt: string
}

interface AnalyticsData {
    totalSessions: number
    completedSessions: number
    averageScore: number
    timeSpent: number
    streakDays: number
    improvementData: Array<{
        session: number
        score: number
        date: string
    }>
    skillsData: Array<{
        skill: string
        score: number
        fullMark: number
    }>
    sessionTypeData: Array<{
        name: string
        value: number
        percentage: number
    }>
    weeklyData: Array<{
        day: string
        sessions: number
    }>
    recentSessions: PracticeSession[]
}

export default function StudentDashboard() {
    const [student, setStudent] = useState<StudentData | null>(null)
    const [analytics, setAnalytics] = useState<AnalyticsData | null>(null)
    const [isLoading, setIsLoading] = useState(true)
    const router = useRouter()

    useEffect(() => {
        fetchStudentData()
        fetchAnalytics()
    }, [])

    const fetchStudentData = async () => {
        try {
            const response = await fetch('/api/student/profile')
            if (response.ok) {
                const data = await response.json()
                setStudent(data.student)
            } else if (response.status === 401) {
                router.push('/student/login')
            }
        } catch (error) {
            console.error('Error fetching student data:', error)
        } finally {
            setIsLoading(false)
        }
    }

    const fetchAnalytics = async () => {
        try {
            const response = await fetch('/api/student/analytics')
            if (response.ok) {
                const data = await response.json()
                setAnalytics(data.analytics)
            } else if (response.status === 401) {
                router.push('/student/login')
            }
        } catch (error) {
            console.error('Error fetching analytics:', error)
        }
    }
    const improvementData = [
        { session: 1, score: 65 },
        { session: 2, score: 72 },
        { session: 3, score: 68 },
        { session: 4, score: 78 },
        { session: 5, score: 85 },
        { session: 6, score: 82 },
        { session: 7, score: 88 },
        { session: 8, score: 91 }
    ]

    const skillsData = [
        { skill: 'Communication', score: 85, fullMark: 100 },
        { skill: 'Technical', score: 78, fullMark: 100 },
        { skill: 'Problem Solving', score: 82, fullMark: 100 },
        { skill: 'Confidence', score: 75, fullMark: 100 },
        { skill: 'Professionalism', score: 88, fullMark: 100 }
    ]

    const sessionTypeData = [
        { name: 'Technical', value: 45, color: '#22c55e' },
        { name: 'Behavioral', value: 30, color: '#3b82f6' },
        { name: 'Case Study', value: 15, color: '#f59e0b' },
        { name: 'General', value: 10, color: '#ef4444' }
    ]

    const weeklyActivityData = [
        { day: 'Mon', sessions: 2 },
        { day: 'Tue', sessions: 1 },
        { day: 'Wed', sessions: 3 },
        { day: 'Thu', sessions: 0 },
        { day: 'Fri', sessions: 2 },
        { day: 'Sat', sessions: 1 },
        { day: 'Sun', sessions: 0 }
    ]

    useEffect(() => {
        fetchStudentData()
        fetchRecentSessions()
    }, [])

    const fetchStudentData = async () => {
        try {
            const response = await fetch('/api/student/profile')
            if (response.ok) {
                const data = await response.json()
                setStudent(data.student)
            } else {
                router.push('/student/login')
            }
        } catch (error) {
            console.error('Error fetching student data:', error)
        }
    }

    const fetchRecentSessions = async () => {
        try {
            const response = await fetch('/api/practice/sessions?limit=5')
            if (response.ok) {
                const data = await response.json()
                setRecentSessions(data.sessions)
            }
        } catch (error) {
            console.error('Error fetching sessions:', error)
        } finally {
            setIsLoading(false)
        }
    }

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric'
        })
    }

    const formatDuration = (seconds: number) => {
        const minutes = Math.floor(seconds / 60)
        return `${minutes}m`
    }

    const getStatusBadge = (status: string) => {
        const variants: Record<string, "default" | "secondary" | "destructive"> = {
            completed: "default",
            "in-progress": "secondary",
            abandoned: "destructive"
        }
        return <Badge variant={variants[status] || "default"}>{status}</Badge>
    }

    if (isLoading) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-emerald-950 via-slate-900 to-slate-950 flex items-center justify-center">
                <div className="text-white">Loading...</div>
            </div>
        )
    }

    if (!student) {
        return null
    }

    const quotaPercentage = (student.practiceUsed / student.practiceQuota) * 100
    const remainingSessions = student.practiceQuota - student.practiceUsed

    return (
        <div className="min-h-screen bg-gradient-to-br from-emerald-950 via-slate-900 to-slate-950 p-4">
            <div className="max-w-7xl mx-auto space-y-6">
                {/* Header */}
                <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                    <div>
                        <h1 className="text-3xl font-bold text-white">
                            Welcome back, {student.firstName}! ðŸ‘‹
                        </h1>
                        <p className="text-slate-400 mt-2">
                            {student.university && `${student.university} â€¢ `}
                            {student.major && `${student.major} â€¢ `}
                            {student.targetRole && `Targeting ${student.targetRole}`}
                        </p>
                    </div>
                    <div className="flex gap-3">
                        <Button
                            onClick={() => router.push('/student/practice')}
                            className="bg-gradient-to-r from-emerald-600 to-blue-600 hover:from-emerald-500 hover:to-blue-500"
                        >
                            <Play className="w-4 h-4 mr-2" />
                            Start Practice
                        </Button>
                        <Button
                            variant="outline"
                            onClick={() => router.push('/student/profile')}
                            className="border-slate-700 text-slate-300 hover:bg-slate-800"
                        >
                            <Settings className="w-4 h-4 mr-2" />
                            Settings
                        </Button>
                    </div>
                </div>

                {/* Key Metrics Row */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <Card className="border-slate-800/50 bg-slate-900/80 backdrop-blur-xl">
                        <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                                <Trophy className="w-8 h-8 text-yellow-500" />
                                <Badge variant="secondary">{student.subscriptionTier}</Badge>
                            </div>
                            <CardTitle className="text-2xl font-bold text-white">
                                {student?.analytics?.averageScore || 0}%
                            </CardTitle>
                            <CardDescription className="text-slate-400">
                                Average Score
                            </CardDescription>
                        </CardHeader>
                    </Card>

                    <Card className="border-slate-800/50 bg-slate-900/80 backdrop-blur-xl">
                        <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                                <Target className="w-8 h-8 text-emerald-500" />
                                <span className="text-xs text-slate-400">{remainingSessions} left</span>
                            </div>
                            <CardTitle className="text-2xl font-bold text-white">
                                {student?.analytics?.completedSessions || 0}
                            </CardTitle>
                            <CardDescription className="text-slate-400">
                                Sessions Completed
                            </CardDescription>
                        </CardHeader>
                        <CardContent className="pt-0">
                            <Progress value={quotaPercentage} className="h-2" />
                        </CardContent>
                    </Card>

                    <Card className="border-slate-800/50 bg-slate-900/80 backdrop-blur-xl">
                        <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                                <Zap className="w-8 h-8 text-blue-500" />
                                <TrendingUp className="w-4 h-4 text-emerald-400" />
                            </div>
                            <CardTitle className="text-2xl font-bold text-white">
                                {student?.analytics?.streakDays || 0}
                            </CardTitle>
                            <CardDescription className="text-slate-400">
                                Day Streak
                            </CardDescription>
                        </CardHeader>
                    </Card>

                    <Card className="border-slate-800/50 bg-slate-900/80 backdrop-blur-xl">
                        <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                                <Clock className="w-8 h-8 text-purple-500" />
                                <Calendar className="w-4 h-4 text-slate-400" />
                            </div>
                            <CardTitle className="text-2xl font-bold text-white">
                                2.5h
                            </CardTitle>
                            <CardDescription className="text-slate-400">
                                This Week
                            </CardDescription>
                        </CardHeader>
                    </Card>
                </div>

                {/* Charts Row */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Progress Chart */}
                    <Card className="border-slate-800/50 bg-slate-900/80 backdrop-blur-xl">
                        <CardHeader>
                            <CardTitle className="text-white flex items-center gap-2">
                                <TrendingUp className="w-5 h-5" />
                                Progress Trend
                            </CardTitle>
                            <CardDescription className="text-slate-400">
                                Your score improvement over recent sessions
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <ResponsiveContainer width="100%" height={300}>
                                <AreaChart data={improvementData}>
                                    <defs>
                                        <linearGradient id="scoreGradient" x1="0" y1="0" x2="0" y2="1">
                                            <stop offset="5%" stopColor="#22c55e" stopOpacity={0.8} />
                                            <stop offset="95%" stopColor="#22c55e" stopOpacity={0.1} />
                                        </linearGradient>
                                    </defs>
                                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                                    <XAxis dataKey="session" stroke="#9ca3af" />
                                    <YAxis stroke="#9ca3af" />
                                    <Tooltip
                                        contentStyle={{
                                            backgroundColor: '#1e293b',
                                            border: '1px solid #475569',
                                            borderRadius: '8px',
                                            color: '#f1f5f9'
                                        }}
                                    />
                                    <Area
                                        type="monotone"
                                        dataKey="score"
                                        stroke="#22c55e"
                                        strokeWidth={2}
                                        fillOpacity={1}
                                        fill="url(#scoreGradient)"
                                    />
                                </AreaChart>
                            </ResponsiveContainer>
                        </CardContent>
                    </Card>

                    {/* Skills Radar */}
                    <Card className="border-slate-800/50 bg-slate-900/80 backdrop-blur-xl">
                        <CardHeader>
                            <CardTitle className="text-white flex items-center gap-2">
                                <Award className="w-5 h-5" />
                                Skills Assessment
                            </CardTitle>
                            <CardDescription className="text-slate-400">
                                Your performance across different skill areas
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <ResponsiveContainer width="100%" height={300}>
                                <RadarChart data={skillsData}>
                                    <PolarGrid stroke="#374151" />
                                    <PolarAngleAxis dataKey="skill" tick={{ fill: '#9ca3af' }} />
                                    <PolarRadiusAxis domain={[0, 100]} tick={{ fill: '#9ca3af' }} />
                                    <Radar
                                        name="Score"
                                        dataKey="score"
                                        stroke="#3b82f6"
                                        fill="#3b82f6"
                                        fillOpacity={0.3}
                                        strokeWidth={2}
                                    />
                                </RadarChart>
                            </ResponsiveContainer>
                        </CardContent>
                    </Card>
                </div>

                {/* Bottom Row */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Recent Sessions */}
                    <Card className="lg:col-span-2 border-slate-800/50 bg-slate-900/80 backdrop-blur-xl">
                        <CardHeader>
                            <CardTitle className="text-white flex items-center gap-2">
                                <BookOpen className="w-5 h-5" />
                                Recent Sessions
                            </CardTitle>
                            <CardDescription className="text-slate-400">
                                Your latest practice interview sessions
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <div className="space-y-4">
                                {recentSessions.length > 0 ? (
                                    recentSessions.map((session) => (
                                        <div key={session.id} className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/50">
                                            <div className="flex-1">
                                                <h4 className="font-medium text-white">{session.templateName}</h4>
                                                <p className="text-sm text-slate-400">
                                                    {formatDate(session.startedAt)} â€¢ {formatDuration(session.duration)}
                                                </p>
                                            </div>
                                            <div className="flex items-center gap-3">
                                                {session.score && (
                                                    <span className="text-sm font-medium text-emerald-400">
                                                        {session.score}%
                                                    </span>
                                                )}
                                                {getStatusBadge(session.status)}
                                            </div>
                                        </div>
                                    ))
                                ) : (
                                    <div className="text-center py-8">
                                        <BookOpen className="w-12 h-12 text-slate-600 mx-auto mb-3" />
                                        <p className="text-slate-400">No sessions yet</p>
                                        <Button
                                            className="mt-3 bg-gradient-to-r from-emerald-600 to-blue-600"
                                            onClick={() => router.push('/student/practice')}
                                        >
                                            Start Your First Session
                                        </Button>
                                    </div>
                                )}
                            </div>
                        </CardContent>
                    </Card>

                    {/* Quick Stats */}
                    <div className="space-y-6">
                        {/* Session Types */}
                        <Card className="border-slate-800/50 bg-slate-900/80 backdrop-blur-xl">
                            <CardHeader>
                                <CardTitle className="text-white text-lg">Session Types</CardTitle>
                            </CardHeader>
                            <CardContent>
                                <ResponsiveContainer width="100%" height={200}>
                                    <PieChart>
                                        <Pie
                                            data={sessionTypeData}
                                            cx="50%"
                                            cy="50%"
                                            innerRadius={40}
                                            outerRadius={80}
                                            dataKey="value"
                                        >
                                            {sessionTypeData.map((entry, index) => (
                                                <Cell key={`cell-${index}`} fill={entry.color} />
                                            ))}
                                        </Pie>
                                        <Tooltip
                                            contentStyle={{
                                                backgroundColor: '#1e293b',
                                                border: '1px solid #475569',
                                                borderRadius: '8px',
                                                color: '#f1f5f9'
                                            }}
                                        />
                                    </PieChart>
                                </ResponsiveContainer>
                                <div className="space-y-2 mt-4">
                                    {sessionTypeData.map((item, index) => (
                                        <div key={index} className="flex items-center justify-between text-sm">
                                            <div className="flex items-center gap-2">
                                                <div
                                                    className="w-3 h-3 rounded-full"
                                                    style={{ backgroundColor: item.color }}
                                                />
                                                <span className="text-slate-300">{item.name}</span>
                                            </div>
                                            <span className="text-slate-400">{item.value}%</span>
                                        </div>
                                    ))}
                                </div>
                            </CardContent>
                        </Card>

                        {/* Weekly Activity */}
                        <Card className="border-slate-800/50 bg-slate-900/80 backdrop-blur-xl">
                            <CardHeader>
                                <CardTitle className="text-white text-lg">This Week</CardTitle>
                            </CardHeader>
                            <CardContent>
                                <ResponsiveContainer width="100%" height={120}>
                                    <BarChart data={weeklyActivityData}>
                                        <XAxis dataKey="day" tick={{ fill: '#9ca3af', fontSize: 12 }} />
                                        <Bar dataKey="sessions" fill="#22c55e" radius={[2, 2, 0, 0]} />
                                    </BarChart>
                                </ResponsiveContainer>
                            </CardContent>
                        </Card>
                    </div>
                </div>
            </div>
        </div>
    )
}